import db
import random

from aiogram.types import FSInputFile



def validate_profile_name(name):
    if len(name) < 20:
        return True, name
    else:
        return False, "–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ‚ùå"

def validate_and_serialize_genders(gender):
    gender_data = {"–ü–∞—Ä–µ–Ω—å üßë":"M", "–ü–∞—Ä–Ω–∏ üßë": "M",
                   "–î–µ–≤—É—à–∫–∞ üë©": "F", "–î–µ–≤—É—à–∫–∏ üë©":"F",
                   "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã ü§∑‚Äç‚ôÇÔ∏è":None}
    if gender in gender_data.keys():
        return True, gender_data[gender]
    return False, "–ü–æ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π‚ùå"

def transorm_gender_to_emoji(gender):
    gender_data = {"M":"üßë",  "F":"üë©"}
    return gender_data[gender]


def validate_institute(institute):
    institutes = ["–ò–ë–û", "–ò–ù–ú–∏–ù", "–≠–∫–æ.–¢–µ—Ö", "–ú–ì–ò", "–≠–£–ü–ü"]
    if institute in institutes:
        return True, institute
    else:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç ‚ùå"
    
def validate_year(year):
    years = ["I", "II", "III", "IV", "V(–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç)", "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"]
    if year in years:
        return True, year
    else:
        return False, "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –∫—É—Ä—Å ‚ùå"
    

def validate_age(age):
    if age.isdigit():
        if 15 < int(age) and int(age) < 100:
            return True, age
        else:
            return False, "–í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚ùå"
    else:
        return False, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç ‚ùå"
    

def validate_description(description):
    correct_words_amount = 350
    max_symbols = 4000
    if len(description.split()) < correct_words_amount and len(description) < max_symbols:
        return True, description
    else:
        return False, f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ‚ùå"


def validate_make_profile_inactive_action(action):  
    if action not in ["–î–∞-‚úÖ", "–ù–µ—Ç-‚õîÔ∏è"]:
        return False, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –æ—Ç–≤–µ—Ç ‚ùå"
    else:
        return True, action
    

def validate_personal_message(personal_message):
    correct_words_amount = 35
    max_symbols = 400
    if len(personal_message.split()) < correct_words_amount and len(personal_message) < max_symbols:
        return True, personal_message
    else:
        return False, f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ ‚ùå"


# Search mechanics

def get_random_user_in_search(user_id):
    """  Returns  -> (bool, list)
        the first bool shows if users is empty
        the second list returns the user's list
        if it's not empty  
        ---------------------------------------
        Also it checks if the user which id  
        was given as an argument is not banned  """
    con = db.get_connection("my.db")
    interested_in = db.check_user_existance(con, user_id)[1][7]
    is_banned = db.check_user_existance(con, user_id)[1][13]
    users = db.get_all_users(con, interested_in)
    if users != [] and bool(is_banned) != True:
        random_user = random.choice(users)
        return True, random_user
    else:
        return False, []



# Profile
def display_profile(user_id):
    """ Returns the tuple of:  
        bool: returns if the user is registered  
        str: message text  
        FSInputFile: photo  
    """

    con = db.get_connection("my.db")
    user = db.check_user_existance(con, user_id) # stores the data about the user(bool - existance, tuple - data)
    con.close()
    
    if user[0]:
        
        u_data = user[1]

        # Setting profile description to empty string in case if it's None
        description = u_data[5]
        if description is None:
            description = ""

        m_text = f'–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ üë§\n\n*{u_data[1]}, {u_data[2]}{transorm_gender_to_emoji(u_data[6])}*\n{u_data[4]}, {u_data[3]} üè´\n\n_{description}_\n\n'
        photo = FSInputFile(f'media/photo_1_{user_id}.jpg')

        return True, m_text, photo

    else:
        return False, "*–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚ùå*\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑—É—è /start", None
    


def check_user_activity_and_set_active(user_id):
    """ This function checks if the user is not
     active and sets it to active """
    con = db.get_connection("my.db")
    user = db.check_user_existance(con, user_id)
    u_data = user[1]

    if not(bool(u_data[12])):
        db.activate_and_inactivate_user(con, user_id=user_id, is_active=True)

    con.close()